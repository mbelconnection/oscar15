This document is a tutorial for developers migrating from eclipse & cvs. 

This document doesn't isn't required in that if you already have experience using eclipse & git, this will not be of any use to you.

This document is very brief, you should have a basic understanding of GIT before doing this. This basically just explains the tools setup to use GIT, not what GIT is. You need to understand the concept of remote and local repositories.

-------------------
Register For Gerrit
-------------------
Go to the gerrit web site and register your user. The gerrit url should be provided. For this example I will use https://source.oscartools.org:8080 and my email r6squeegee@gmail.com (you'll need to use your own where ever you see my account name).

On the gerrit main screen you should see a register option on the top right of the screen, you should be able to register using openId with your google email or one of the similar options.

On the main registration screen :
	- For "Full Name" enter the persons name and click "save changed" (yes you actually need to click that now).
	- For "select a unique username" this will become your ssh access username, We'll use your email address (before the @ sign) as a standard. You need to click "select username" now.
	- For "Register an SSH public key" : if you already know or have SSH keys you can just provide it, otherwise do the following : 
		- on your client machine / developer machine : "ssh-keygen -t rsa", do not enter a password when it asks. This means... if you machine is compromised, your gerrit user is compromised and the corresponding server key should be deleted, you'll need to tell the gerrit administrator and or login to the gerrit web site and delete this key.
		- now cut and paste the contents of "~/.ssh/id_rsa.pub" into the text area on the web page.
		- click add and it should list it as an added key on the screen.
	- now on the bottom of the screen there's a link that says "continue" click that, now you should be at the your "code review dashboard" screen.

At this point, if your eclipse was already running, you need to stop it and start it again. Eclipse caches ssh key information. (really, it does)

------
Plugin
------
Follow the instructions at http://www.eclipse.org/egit/ to install the git eclipse plugin. At the time of this writing I was using 0.9.3.


------------
~/.gitconfig
------------
You need a file in your home directory calls .gitconfig, in that file you need at least the [user] section, below is my .gitconfig for reference
	[user]
   		  	name = Ted Leung
       		email = r6squeegee@gmail.com
	[core]
   		  	editor = nano

As a note, you can also edit this file in your eclipse->preferences->team->git, it opens the file in an editor panel for you.


--------------
Add Repository
--------------
On the package explorer tab (or what ever your favourite explorer is), right click and select import -> "projects from git" -> clone.

The repository details should be provided for your git/gerrit installation, for my example I will use "ssh://r6squeegee@source.osrcartools.org:29418/test". Just continue with the screen flow, most options should be obvious or defaults should be fine.

Now back on the import screen, select the new repository (click on it again even though it's highlighted to make the next button available). Continue with the screen flow, most of the defaults should be fine.

Notice on your package explorer you new have the new project like any other previous project.


---------------
Getting updates
---------------
To get updates from the remote repository. First right click on the project and do a team -> fetch from. 

If this is the first time you've done this you'll need to configure the remote repository. On the first screen my option is "origin: ssh//r6squeegee@localhost:29418/foo". On the next screen just accept the defaults. If you follow the next dialogs it will tell you if anything was retrieved.

At this point notice your work place hasn't changed. The remote changes were put into your local repository but your local work space hasn't been affected.

Right click on the project and go to team -> merge. Click on origin/master on the remote branches. Now you'll see your local work space with the changes.


--------------
Making changes
--------------
Now say you've created new files in the project and altered some existing ones.

If you right click on the project, go to team -> commit. You'll see the commit screen. Notice on eclipse it will list the tracked and untracked file and by default they will be "git added" and "git commited" at the same time. Now when you commit, it's commited locally. This means no one else except you has these changes still.

Now to share these changes with everyone else, i.e. committed to the main repository... (You must have committed locally first) 

Now, right click on the project, go to team -> push. 

If this is the first time you've pushed, you'll need to fill in a push specification. source ref="HEAD", destincation ref="refs/for/master", select add spec, check the box on the bottom saying save spec... so you don't have to do this again. Just click "finish" (next doesn't show anything interesting).

If you go to the gerrit web page you should see the change is pending review now.

Note that at this point, you and the central repository are not in sync, the files at the central repository must be approved first. Even after the changes on the central repository are approved, you must follow the "getting updates" again before you and the central repository are in sync (yes even if the files happen to be the same on the 2 servers, the pointers are not in sync until you merge).  


------------------------------------------------
When to commit locally and when to push remotely
------------------------------------------------
Generally speaking you should commit locally for independent small units of work. So as an example if you are working on a feature, you may have incremental phases in completion of that feature. You should commit at each phase, the code should at least compile and run.

Generally speaking pushing remotely can be done for any commit. There is generally no need to bundle up multiple commits into one big push. The difference between a push and commit maybe more important if you're working offline as you can only push while online.

The reason for the above is because of the review model of gerrit. You don't want to do one big commit because it will be a nightmare to review and approve. Think about the example of converting 300 DBHandler calls into maybe 100 JPA objects. If that was 1 commit, it would take for ever to review and verify that commit. If you made 300 separate commits, the review process could at least proceed incrementally and in manageable size chunks. The push is for a similar reason, if you had 300 separate commits and you pushed all at once at the end of 6 months, there will be a sudden flood of 300 commits to review and it would be a huge backlog. If you pushed those 300 commits over a 6 month period, review of the commits could have started as soon as the first push was done. 


--------------
ChangeId Hooks
--------------
Change ID Hook will add a change ID to every commit you make. The benefit of this is if you change / fix a commit and resubmit it, gerrit will use the changeId to replace the previous commit. The problem with this is that it only works on the command line git for now, eclipse does not yet support hooks. 

To install the changeId hook, you need to first grab a copy from the test project. On the command line, while in the test repository do "scp -p -P 29418 r6squeegee@source.oscartools.org:hooks/commit-msg .git/hooks/commit-msg". This will effecitvely enable the changeId hook for the test project. Now to make it work for any other project just copy the .git/hooks/commit-msg to the other projects. You need to make sure the file is chmoded +x as it's a shell script.


-----------------------
Fixing previous commits
-----------------------
The easiest way to fix a previous commit is to continue working the way we did in CVS... i.e. make another commit with the changes/fixes. For those who are more adventurous there is a native git/gerrit routine to do this but the commands are also not supported in eclipse.

From the command line :
- make sure your work space has the gerrit changes you want to fix. If you don't you can explicitly fetch the branches by looking at the URL's of the commit on the gerrit pages.
- set one branch to the end of the set of changes, i.e. master.
- create and switch to another branch to the commit that needs to be fixed, i.e. "git branch -b fix 4dj45" where 4dj45 is the first part of the SHA of the commit.
- make the changes you need to make
- "git commit -a --amend" the change.
- switch back to the end point, i.e. git checkout master
- rebase from the amended commit to here, i.e. "git rebase -i fix", 
	- it will bring up a list of subsequent commits, change the "pick" on each commit to "edit"
	- it will then iterate through all the commits,
		- it will checkout the next commit, warn you about conflicts, you need to
		- resolve any conflict, make any changes you need
		- then "git commit -a --amend"
		- then "git rebase --continue"  
- git push origin HEAD:refs/for/master
- git branch -D fix

Now if you have changeId's enabled, the above will replace the previous commits, if you don't the commits will show up in git as a string of new commits and the old commits should just be abandoned.       