This is a temporary document that will out line the things we need to do to migrate from out current cvs/ant to git/gerrit/maven. Once the migration is completed, this document will serve no purpose and should be deleted.

This document will start off as a changing work plan / to-do list. Once the document is more or less complete, all developers should read this and be familiar with the changes about to take place.


-------
Purpose
-------
The main purpose of this migration is to to move to git & gerrit. Maven is actually an unrelated change but due to the mass change in repository and structure and reconfiguration required to developers, this seems like an opportunistic time to slip in this change as well. Maven will not be covered in detail here.


git & gerrit
------------
The main impetus for change here is the ability to control the work flow of the code committed. The are many desirable side effects of git but the main thing was that git allowed us to easily have multiple repositories for incoming code v.s. approved & published code. Gerrit turns out to be a tool that embraces this work flow and provides tools and a UI etc to help accomplish this (although we could have done it even with out gerrit). 

The structure of and usage of git & gerrit is that gerrit is a git repository which proxies all read / write access so it can trigger events as read / write occurs. From the end users point of view, the only difference is the location you are submitting to, i.e. the port number for ssh is different, and the branch location is different as an example "git push ssh://r6squeegee@localhost:29418/foo HEAD:refs/heads/test".

From the code reviewers / process managers point of view, a UI is available which lists all the commits done, and allow them to inspect each one and approve or reject each change and supports a full work flow around that.

Gerrit itself is actually your main working git repository. What happens under the hood is each commit to git becomes a branch and upon code review, each branch can be accepted (merged) or rejected (deleted / ignored). The main "trunk" or in git terms "master" is always the latest code that's been approved. For our purposes, if we are using sourceforge, we would then setup replication so that gerrit pushes the latest master to sourceforge. Sourceforge then becomes more of a publishing site for our work rather than a working site like it is now. Developers would no longer have any need or requirement for accessing the sourceforge repository. Now in theory, we also don't have to backup our gerrit server because in the event of a failure, we can re-install gerrit and copy the sourceforge repository back to the machines. In practice, this may not be a wise choice due to configuration and other things, but the majority of work should be "safe" on the the developers machines as well as sourceforge.

As a note, gerrit appears a little rough right now. I've encountered a few bugs already just under simple testing. We should proceed with caution.


-------------------
Tasks for migration
-------------------
Note there is no time line associated with these steps, they're just a list of things we need to do, in time-line order so we don't forget anything. We should take as much time is necessary at each step and not rush anything.


Dry run of setup (Jay & Ted)
----------------------------
- setup a sf git repository
- setup a test gerrit at mcmaster
- test out
	- usual reading / writing to gerrit
	- make sure emails are being sent on approvals / rejections
	- access controls and work flow with different accounts etc
	- publishing to sf


Announcement of Intent to migrate
--------------------------------
If our dry run works, we need to make an announcement of our migration plans and intent so developers can :
- familiarise themselves with Git / Gerrit / Maven and how to use them with their IDEs. We can use the test system to help people test it out.
- merge out standing branches they want back in, as once the conversion happens and directory changes take place etc... good luck.


oscar_apps migration (Jay & Ted)
--------------------------------
We will start with a low developer count project, other developers should be able to continue working on cvs while learning git.

- setup real sf git repositories  / configure sf git for oscar_apps
- setup real gerrit / configure real gerrit for oscar_apps
- commit oscar_apps to gerrit / lock SF cvs oscar_apps
- test out a few changes commits
- check publishing to sf works
- hudson?
- we need to document a workflow / who is responsible for approval etc.


caisi_integrator migration (Jay, Ted, Annie, Ronnie)
----------------------------------------------------
This project has a few more developers, Annie and Ronnie have touched the integrator recently, they will need to know git by here.

- There's an anomaly here we want to take care of. the HNR was embedded with in the integrator repository because of CVS / sourceforge reasons. At this point we should split it back up into 2 projects. Ted can handle this portion.
- convert integrator & hnr to git/gerrit like with oscar_apps


oscar (all developers)
----------------------
At this point all developers have had some time to read up on git. If you don't know it now... too late :)

- migrate oscar to git /gerrit like previous projects
- do the tracker ID / change log thing still work? 
- do a maven conversion
- code will be missing after maven conversion, most can be ignored but some will require new projects
	- oscar/oscar_document
	- oscar/DrugRef? what is that?
	- oscar/HL7FileManagement
	- oscar/RourkeVacsMigrator
	- oscar/mdsFileManagement
	- oscar/hospitalccinnect
	- oscar/CMLFileManagement


loose ends
----------
- drug ref?
- MyOscar


------------
Failure plan
------------
If failure occurs before the oscar_apps migration we can abort everything.

If failure occurs at oscar_apps, we can hopefully revert this to cvs and abort everything.

After oscar_apps, this is the point of no-return. We can pause the migration plan at any point in time, but after oscar_apps we are committed to living with what is converted and committed to converting everything "eventually". 



